{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to UAB Research Computing Docs \u00b6 Welcome to UAB Research Computing DevOps Docs! The Research Computing System (RCS) provides a framework for sharing data, accessing compute power, and collaborating with peers on campus and around the globe. Our goal is to construct a dynamic \"network of services\" that you can use to organize, study and share research data and analyses at UAB. These are the Development and Operation docs that help make all that happen. Research Computing provides services to researchers in these core areas: Data Analysis : using the High Performance Computing (HPC) fabric for batch data processing. Data Sharing : supporting trusted information exchange to spark new ideas via our system. Application Development : providing virtual machines and web-hosted development tools empowering researchers via our RC Cloud. Contact Us \u00b6 To create a support ticket please reach out to us via email at support@listserv.uab.edu . Support and Development \u00b6 RCS is developed and supported by UAB IT's Research Computing Group. We are developing a core set of applications to help you to easily incorporate our services into your research processes and this documentation collection to help you leverage the resources already available. We follow the best practices of the Open Source community and develop our software in an open-source fashion. RCS is an out growth of the UABgrid pilot, launched in September 2007 which has focused on demonstrating the utility of centralized analysis, storage, and application for research. RCS is built on the same technology foundations used by major cloud vendors and decades of distributed systems computing research, technology that powered the last ten years of large scale systems serving prominent national and international initiatives like the Open Science Grid , XSEDE , the LHC Computing Grid , and NCIP . Outreach \u00b6 The UAB IT Research Computing Group has collaborated with a number of prominent research projects at UAB to identify use cases and develop requirements. Our collaborators include, but are not limited to, the Center for Clinical and Translational Science (CCTS), Heflin Genomics Center, the Comprehensive Cancer Center (CCC), the Department of Computer and Information Sciences (CIS), the Department of Mechanical Engineering (ME), Lister Hill Library, the School of Optometry's Center for the Development of Functional Imaging, and Health System Information Services (HSIS). As part of the process of building RC, the UAB IT Research Computing group has hosted an annual campus symposium on research computing and cyber-infrastructure (CI) developments and accomplishments. Starting as CyberInfrastructure (CI) Days in 2007, the name was changed to UAB Research Computing Day in 2011 to reflect the broader mission to support research. IT Research Computing also participates in other campus wide symposiums including UAB Research Core Day.","title":"Home"},{"location":"#welcome-to-uab-research-computing-docs","text":"Welcome to UAB Research Computing DevOps Docs! The Research Computing System (RCS) provides a framework for sharing data, accessing compute power, and collaborating with peers on campus and around the globe. Our goal is to construct a dynamic \"network of services\" that you can use to organize, study and share research data and analyses at UAB. These are the Development and Operation docs that help make all that happen. Research Computing provides services to researchers in these core areas: Data Analysis : using the High Performance Computing (HPC) fabric for batch data processing. Data Sharing : supporting trusted information exchange to spark new ideas via our system. Application Development : providing virtual machines and web-hosted development tools empowering researchers via our RC Cloud.","title":"Welcome to UAB Research Computing Docs"},{"location":"#contact-us","text":"To create a support ticket please reach out to us via email at support@listserv.uab.edu .","title":"Contact Us"},{"location":"#support-and-development","text":"RCS is developed and supported by UAB IT's Research Computing Group. We are developing a core set of applications to help you to easily incorporate our services into your research processes and this documentation collection to help you leverage the resources already available. We follow the best practices of the Open Source community and develop our software in an open-source fashion. RCS is an out growth of the UABgrid pilot, launched in September 2007 which has focused on demonstrating the utility of centralized analysis, storage, and application for research. RCS is built on the same technology foundations used by major cloud vendors and decades of distributed systems computing research, technology that powered the last ten years of large scale systems serving prominent national and international initiatives like the Open Science Grid , XSEDE , the LHC Computing Grid , and NCIP .","title":"Support and Development"},{"location":"#outreach","text":"The UAB IT Research Computing Group has collaborated with a number of prominent research projects at UAB to identify use cases and develop requirements. Our collaborators include, but are not limited to, the Center for Clinical and Translational Science (CCTS), Heflin Genomics Center, the Comprehensive Cancer Center (CCC), the Department of Computer and Information Sciences (CIS), the Department of Mechanical Engineering (ME), Lister Hill Library, the School of Optometry's Center for the Development of Functional Imaging, and Health System Information Services (HSIS). As part of the process of building RC, the UAB IT Research Computing group has hosted an annual campus symposium on research computing and cyber-infrastructure (CI) developments and accomplishments. Starting as CyberInfrastructure (CI) Days in 2007, the name was changed to UAB Research Computing Day in 2011 to reflect the broader mission to support research. IT Research Computing also participates in other campus wide symposiums including UAB Research Core Day.","title":"Outreach"},{"location":"cheaha/shell_commands/","text":"Shell Commands \u00b6 Message a User \u00b6 The write command can be used to message a user on the same node. The command takes 2 arguments, the USER followed by the user's terminal. Ex: write blaze pts/3 The command allows you to enter one or more lines of text and is sent by pressing CTRL D . The following command will message the user on all of their terminals: user = blaze for term in $( w $user | grep $user | awk '{print $2}' ) ; do echo \"Please do not run jobs on the login node\" | write $user $term ; done Extend TimeLimit for a Job \u00b6 Occassionaly, we will get a request from a user to extend the TimeLimit for a job(s). TimeLimit=<time> The job's time limit. Output format is [days-]hours:minutes:seconds or \" UNLIMITED \". Input format (for update command) set is minutes , minutes:seconds , hours:minutes:seconds , days-hours , days-hours:minutes or days-hours:minutes:seconds . Time resolution is one minute and second values are rounded up to the next minute. If changing the time limit of a job, either specify a new time limit value or precede the time and equal sign with a \" + \" or \" - \" to increment or decrement the current time limit (e.g. \" TimeLimit+=30 \"). In order to increment or decrement the current time limit, the JobId specification must precede the TimeLimit specification. Note that incrementing or decrementing the time limit for a job array is only allowed before the job array has been split into more than one job record. Example: Extend the TimeLimit for three jobs by 10 days for job in 15202444 15202445 15202446 ; do scontrol show job $job | grep TimeLimit | awk '{print $2}' scontrol update jobid = $job TimeLimit = +10-00 scontrol show job $job | grep TimeLimit | awk '{print $2}' done","title":"Shell Commands"},{"location":"cheaha/shell_commands/#shell-commands","text":"","title":"Shell Commands"},{"location":"cheaha/shell_commands/#message-a-user","text":"The write command can be used to message a user on the same node. The command takes 2 arguments, the USER followed by the user's terminal. Ex: write blaze pts/3 The command allows you to enter one or more lines of text and is sent by pressing CTRL D . The following command will message the user on all of their terminals: user = blaze for term in $( w $user | grep $user | awk '{print $2}' ) ; do echo \"Please do not run jobs on the login node\" | write $user $term ; done","title":"Message a User"},{"location":"cheaha/shell_commands/#extend-timelimit-for-a-job","text":"Occassionaly, we will get a request from a user to extend the TimeLimit for a job(s). TimeLimit=<time> The job's time limit. Output format is [days-]hours:minutes:seconds or \" UNLIMITED \". Input format (for update command) set is minutes , minutes:seconds , hours:minutes:seconds , days-hours , days-hours:minutes or days-hours:minutes:seconds . Time resolution is one minute and second values are rounded up to the next minute. If changing the time limit of a job, either specify a new time limit value or precede the time and equal sign with a \" + \" or \" - \" to increment or decrement the current time limit (e.g. \" TimeLimit+=30 \"). In order to increment or decrement the current time limit, the JobId specification must precede the TimeLimit specification. Note that incrementing or decrementing the time limit for a job array is only allowed before the job array has been split into more than one job record. Example: Extend the TimeLimit for three jobs by 10 days for job in 15202444 15202445 15202446 ; do scontrol show job $job | grep TimeLimit | awk '{print $2}' scontrol update jobid = $job TimeLimit = +10-00 scontrol show job $job | grep TimeLimit | awk '{print $2}' done","title":"Extend TimeLimit for a Job"}]}